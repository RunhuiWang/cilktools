# -*- mode: makefile-gmake; -*-

COMPILER ?= LLVM

COMPILERS_HOME = $(HOME)/compilers

CC = gcc
CXX = g++
BASIC_CFLAGS = -O1 -Wall -g
BASIC_CXXFLAGS=$(BASIC_CFLAGS)
TOOLFLAGS = -I $(INCLUDE_DIR)
APPFLAGS = -fcilkplus
CFLAGS=$(BASIC_CFLAGS) -std=gnu11 $(TOOLFLAGS)
CXXFLAGS=$(BASIC_CXXFLAGS) -std=gnu++11 $(TOOLFLAGS)
LDFLAGS= -L $(LIB_DIR)
#LDLIBS=-g

ifeq ($(COMPILER),LLVM)
COMPILER_ROOT = $(COMPILERS_HOME)/llvm-cilk-ok
CC = $(COMPILER_ROOT)/bin/clang
CXX = $(COMPILER_ROOT)/bin/clang++
LDFLAGS += -ldl
else ifeq ($(COMPILER),GCC)
COMPILER_ROOT = $(COMPILERS_HOME)/gcc-supertech
CC = $(COMPILER_ROOT)/bin/gcc
CXX = $(COMPILER_ROOT)/bin/g++
APPFLAGS += -fcilktool
endif

## Each C source file will have a corresponding file of prerequisites.
## Include the prerequisites for each of our C source files.
#-include $(OBJ:.o=.d)

$(LIB_DIR) :
	if [ ! -e $(LIB_DIR) ]; then mkdir -p $(LIB_DIR); fi

# This rule generates a file of prerequisites (i.e., a makefile)
# called name.d from a C source file name.c.
%.d : CFLAGS += -MM -MP
%.d : %.c
	@set -e; rm -f $@; \
	$(CC) $(CFLAGS) -MF $@.$$$$ $<; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# This rule generates a file of prerequisites (i.e., a makefile)
# called name.d from a CPP source file name.cpp.
%.d : CXXFLAGS += -MM -MP
%.d : %.cpp
	@set -e; rm -f $@; \
	$(CXX) $(CXXFLAGS) -MF $@.$$$$ $<; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

# This rule generates a file of prerequisites (i.e., a makefile)
# called name.d from a CPP source file name.cc.
%.d : %.cc
	@set -e; rm -f $@; \
	$(CXX) $(CXXFLAGS) -MF $@.$$$$ $<; \
	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
	rm -f $@.$$$$

%.o : %.c
	$(CC) $(CFLAGS) -c $<

%.o : %.cpp
	$(CXX) $(CXXFLAGS) -c $<

%.o : %.cc
	$(CXX) $(CXXFLAGS) -c $<

$(LIB_DIR)/lib%.a : %.o | $(LIB_DIR)
	ar rcs $@ $^

$(LIB_DIR)/lib%.so : %.o | $(LIB_DIR)
	$(CC) $^ -shared -o $@

# %_% :
# 	$(CC) $(CFLAGS) $(LDFLAGS) $(LDLIBS) $^ -o $@
